/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.calculadora;


/**
 *
 * @author Pi
 */
public class calculadora extends javax.swing.JFrame {

    /**
     * Creates new form calculadora
     */
    public calculadora() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pantalla = new javax.swing.JTextField();
        uno = new javax.swing.JButton();
        dos = new javax.swing.JButton();
        tres = new javax.swing.JButton();
        seis = new javax.swing.JButton();
        cinco = new javax.swing.JButton();
        cuatro = new javax.swing.JButton();
        nueve = new javax.swing.JButton();
        ocho = new javax.swing.JButton();
        siete = new javax.swing.JButton();
        cero = new javax.swing.JButton();
        evaluar = new javax.swing.JButton();
        restar = new javax.swing.JButton();
        exponente = new javax.swing.JButton();
        sumar = new javax.swing.JButton();
        limpiar = new javax.swing.JButton();
        producto = new javax.swing.JButton();
        dividir = new javax.swing.JButton();
        abreParentesis = new javax.swing.JButton();
        cierraParentesis = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 204, 255));

        uno.setBackground(new java.awt.Color(255, 255, 255));
        uno.setText("1");
        uno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unoActionPerformed(evt);
            }
        });

        dos.setBackground(new java.awt.Color(255, 255, 255));
        dos.setText("2");
        dos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dosActionPerformed(evt);
            }
        });

        tres.setBackground(new java.awt.Color(255, 255, 255));
        tres.setText("3");
        tres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tresActionPerformed(evt);
            }
        });

        seis.setBackground(new java.awt.Color(255, 255, 255));
        seis.setText("6");
        seis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seisActionPerformed(evt);
            }
        });

        cinco.setBackground(new java.awt.Color(255, 255, 255));
        cinco.setText("5");
        cinco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cincoActionPerformed(evt);
            }
        });

        cuatro.setBackground(new java.awt.Color(255, 255, 255));
        cuatro.setText("4");
        cuatro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cuatroActionPerformed(evt);
            }
        });

        nueve.setBackground(new java.awt.Color(255, 255, 255));
        nueve.setText("9");
        nueve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nueveActionPerformed(evt);
            }
        });

        ocho.setBackground(new java.awt.Color(255, 255, 255));
        ocho.setText("8");
        ocho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ochoActionPerformed(evt);
            }
        });

        siete.setBackground(new java.awt.Color(255, 255, 255));
        siete.setText("7");
        siete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sieteActionPerformed(evt);
            }
        });

        cero.setBackground(new java.awt.Color(255, 255, 255));
        cero.setText("0");
        cero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ceroActionPerformed(evt);
            }
        });

        evaluar.setBackground(new java.awt.Color(255, 255, 255));
        evaluar.setText("=");
        evaluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluarActionPerformed(evt);
            }
        });

        restar.setBackground(new java.awt.Color(255, 255, 255));
        restar.setText("-");
        restar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restarActionPerformed(evt);
            }
        });

        exponente.setBackground(new java.awt.Color(255, 255, 255));
        exponente.setText("^");
        exponente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exponenteActionPerformed(evt);
            }
        });

        sumar.setBackground(new java.awt.Color(255, 255, 255));
        sumar.setText("+");
        sumar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumarActionPerformed(evt);
            }
        });

        limpiar.setBackground(new java.awt.Color(255, 255, 255));
        limpiar.setText("AC");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });

        producto.setBackground(new java.awt.Color(255, 255, 255));
        producto.setText("*");
        producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productoActionPerformed(evt);
            }
        });

        dividir.setBackground(new java.awt.Color(255, 255, 255));
        dividir.setText("/");
        dividir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dividirActionPerformed(evt);
            }
        });

        abreParentesis.setBackground(new java.awt.Color(255, 255, 255));
        abreParentesis.setText("(");
        abreParentesis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abreParentesisActionPerformed(evt);
            }
        });

        cierraParentesis.setBackground(new java.awt.Color(255, 255, 255));
        cierraParentesis.setText(")");
        cierraParentesis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cierraParentesisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(abreParentesis, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(siete))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ocho)
                                    .addComponent(cierraParentesis, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nueve, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(exponente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(producto, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dividir, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cuatro)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cinco)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(seis, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(restar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(limpiar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pantalla, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cero)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(evaluar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(uno)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tres, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sumar)
                        .addGap(27, 27, 27))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pantalla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exponente, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dividir, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(abreParentesis, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cierraParentesis, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(producto, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(siete, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ocho, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nueve, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cuatro, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cinco, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seis, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(restar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(uno, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dos, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tres, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(evaluar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(sumar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abreParentesisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abreParentesisActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        if(cadena.compareTo("") == 0){
            cadena = cadena + "( ";
        }
        else{
            String prenum[] = cadena.split("");
            if(prenum[prenum.length - 1].compareTo(" ") == 0){
                cadena = cadena + "( ";
            }
            else{
                cadena = cadena + " ( ";
            }
        }
        pantalla.setText(cadena);
    }//GEN-LAST:event_abreParentesisActionPerformed

    private void cierraParentesisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cierraParentesisActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        if(cadena.compareTo("") != 0){
            String prenum[] = cadena.split(""); //un operador no puede estar despues de otro excepto en el parentesis
            if(prenum[prenum.length - 1].compareTo(" ") != 0){  //es diferente de un espacio porque todo los signos vienen con un espacio
                cadena = cadena + " ) ";
                pantalla.setText(cadena);
            }
        }
    }//GEN-LAST:event_cierraParentesisActionPerformed

    private void exponenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exponenteActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        if(cadena.compareTo("") != 0){
            String prenum[] = cadena.split(""); //un operador no puede estar despues de otro excepto en el parentesis
            if(prenum[prenum.length - 1].compareTo(" ") != 0){  //es diferente de un espacio porque todo los signos vienen con un espacio
                cadena = cadena + " ^ ";
                pantalla.setText(cadena);
            }
            else{
                 if(prenum[prenum.length - 2].compareTo(")") == 0){
                     cadena = cadena + "^ ";
                pantalla.setText(cadena);
                 }
            }
        }
    }//GEN-LAST:event_exponenteActionPerformed

    private void dividirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dividirActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        if(cadena.compareTo("") != 0){
            String prenum[] = cadena.split(""); //un operador no puede estar despues de otro excepto en el parentesis
            if(prenum[prenum.length - 1].compareTo(" ") != 0){
                cadena = cadena + " / ";
                pantalla.setText(cadena);
            }
            else{
                if(prenum[prenum.length - 2].compareTo(")") == 0){
                    cadena = cadena + "/ ";
                pantalla.setText(cadena);
                }
            }
        }
    }//GEN-LAST:event_dividirActionPerformed

    private void productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productoActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        if(cadena.compareTo("") != 0){
            String prenum[] = cadena.split(""); //un operador no puede estar despues de otro excepto en el parentesis
            if(prenum[prenum.length - 1].compareTo(" ") != 0){
                cadena = cadena + " * ";
                pantalla.setText(cadena);
            }
            else{
                if(prenum[prenum.length - 2].compareTo(")") == 0){
                    cadena = cadena + "* ";
                pantalla.setText(cadena);
                }
            }
        }
    }//GEN-LAST:event_productoActionPerformed

    private void restarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restarActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        if(cadena.compareTo("") != 0){
            String prenum[] = cadena.split(""); //un operador no puede estar despues de otro excepto en el parentesis
            if(prenum[prenum.length - 1].compareTo(" ") != 0){
                cadena = cadena + " - ";
                pantalla.setText(cadena);
            }
            else{
                if(prenum[prenum.length - 2].compareTo(")") == 0){
                    cadena = cadena + "- ";
                pantalla.setText(cadena);
                }
            }
        }
    }//GEN-LAST:event_restarActionPerformed

    private void sumarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumarActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        if(cadena.compareTo("") != 0){
            String prenum[] = cadena.split(""); //un operador no puede estar despues de otro excepto en el parentesis
            if(prenum[prenum.length - 1].compareTo(" ") != 0){
                cadena = cadena + " + ";
                pantalla.setText(cadena);
            }
            else{
                if(prenum[prenum.length - 2].compareTo(")") == 0){
                    cadena = cadena + "+ ";
                pantalla.setText(cadena);
                }
            }
        }
    }//GEN-LAST:event_sumarActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        pantalla.setText("");
    }//GEN-LAST:event_limpiarActionPerformed

    private void unoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unoActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        cadena = cadena + "1";
        pantalla.setText(cadena);
    }//GEN-LAST:event_unoActionPerformed

    private void dosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dosActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        cadena = cadena + "2";
        pantalla.setText(cadena);
    }//GEN-LAST:event_dosActionPerformed

    private void tresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tresActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        cadena = cadena + "3";
        pantalla.setText(cadena);
    }//GEN-LAST:event_tresActionPerformed

    private void cuatroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cuatroActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        cadena = cadena + "4";
        pantalla.setText(cadena);
    }//GEN-LAST:event_cuatroActionPerformed

    private void cincoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cincoActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        cadena = cadena + "5";
        pantalla.setText(cadena);
    }//GEN-LAST:event_cincoActionPerformed

    private void seisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seisActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        cadena = cadena + "6";
        pantalla.setText(cadena);
    }//GEN-LAST:event_seisActionPerformed

    private void sieteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sieteActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        cadena = cadena + "7";
        pantalla.setText(cadena);
    }//GEN-LAST:event_sieteActionPerformed

    private void ochoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ochoActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        cadena = cadena + "8";
        pantalla.setText(cadena);
    }//GEN-LAST:event_ochoActionPerformed

    private void nueveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nueveActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        cadena = cadena + "9";
        pantalla.setText(cadena);
    }//GEN-LAST:event_nueveActionPerformed

    private void ceroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ceroActionPerformed
        String cadena = "";
        cadena = pantalla.getText();
        String prenum[] = cadena.split(""); //un cero a la izquierda no tiene valor
        if(prenum[prenum.length - 1].compareTo(" ") != 0){  //es diferente de un espacio porque todo los signos vienen con un espacio
            cadena = cadena + "0";
            pantalla.setText(cadena);
        }
    }//GEN-LAST:event_ceroActionPerformed
    private String convertir(String infija){
        String posfija="";
        //Pila de Strings
        Pila pila=new Pila(100);
        //Separamos la expresion que queremos evaluar
        String expresion[] = infija.split(" ");
        for(int i=0;i<expresion.length; i++){
            //entra si es operador
            if(expresion[i].compareTo("(") == 0||expresion[i].compareTo(")") == 0||expresion[i].compareTo("+") == 0||expresion[i].compareTo("-") == 0||expresion[i].compareTo("*") == 0||expresion[i].compareTo("/") == 0||expresion[i].compareTo("^") == 0){
                //al encontrar un ) vaciamos la pila hasta encontrar un (
                if(pila.estaVacia()){
                    pila.apilar(expresion[i]);
                }else{
                    int pe = prioridadExpresion(expresion[i]);
                    //el operador ) no se apila
                    String operador;
                    if(expresion[i].compareTo(")")==0){
                        //sacamos el ultimo operador para añadir a posfija
                        while(pila.elementotope().compareTo("(")!=0){
                            operador=pila.desapilar();
                            posfija = posfija + operador + " ";
                        }
                        pila.desapilar();
                    }
                    else{
                        while(!pila.estaVacia()&&pe<=prioridadPila(pila.elementotope())){
                            operador = pila.desapilar();
                            posfija = posfija + operador + " ";
                        }
                        pila.apilar(expresion[i]);
                    }
                }
            //se añade si es un numero
            }else{
                posfija = posfija + expresion[i] + " ";
            }
        }
        //vaciamos si quedo algun operador en la pila
        while(!pila.estaVacia()){
             posfija = posfija + pila.desapilar() + " ";
        }
        return posfija;
    }
    
     private static int prioridadExpresion(String operador){
        switch(operador){
            case "^":
                return 4;
            case "/":
                return 2;
            case "*":
                return 2;
            case "+":
                return 1;
            case "-":
                return 1;
            case "(":
                return 5;
            case ")":
                return -1;
            default:
                return 0;
        }
    }
    private static int prioridadPila(String operador){
        switch(operador){
            case "^":
                return 3;
            case "/":
                return 2;
            case "*":
                return 2;
            case "+":
                return 1;
            case "-":
                return 1;
            case "(":
                return 0;
            case ")":
                return -1;
            default:
                return 0;
        }
    }
    private int evaluarPosfija(String posfija){
        int numeros[]=new int[50];
        int tope=0, i;
        double ope1, ope2, ope3;
        String expresion[] = posfija.split(" ");
        String recorre;//recorrera nuestra cadena posfija
        for(i=0; i<expresion.length; i++){//recorrera nuestra cadena posfija
            //si el elemento es un operador se evalua 2 numeros
            if(expresion[i].compareTo("+") == 0||expresion[i].compareTo("-") == 0||expresion[i].compareTo("*") == 0||expresion[i].compareTo("/") == 0||expresion[i].compareTo("^") == 0){
                //sacamos los dos ultimos numeros de la pila
                tope--;
                ope2=numeros[tope];
                tope--;
                ope1=numeros[tope];
                switch (expresion[i]){
                   case "*":
                       ope3=ope1 * ope2;
                   break;
                   case "/":
                       ope3=ope1 / ope2;
                   break;
                   case "+":
                       ope3=ope1 + ope2;
                   break;
                   case "-":
                       ope3=ope1 - ope2;
                   break;
                   case "^":
                       ope3=Math.pow(ope1, ope2);
                   break;
                   default:
                       ope3 = 0;
                   break;
               }
               //ope3 se añade nuevamente a la pila como entero
               numeros[tope]=(int)ope3;
               tope++;
            }
            //si es un numero se almacena en la pila numeros
            else{
                numeros[tope] = Integer.parseInt(expresion[i]);
                tope++;
            }
        }              
       return numeros[0];
    }
    
    private int evaluar(String infija){
        String posfija=convertir(infija);
        System.out.println("La expresion Posfija es: "+posfija);
        return evaluarPosfija(posfija);
        //return posfija;
    }
    private void evaluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluarActionPerformed
        String cadena = pantalla.getText();
        pantalla.setText(String.valueOf(evaluar(cadena)));
    }//GEN-LAST:event_evaluarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(calculadora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(calculadora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(calculadora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(calculadora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new calculadora().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abreParentesis;
    private javax.swing.JButton cero;
    private javax.swing.JButton cierraParentesis;
    private javax.swing.JButton cinco;
    private javax.swing.JButton cuatro;
    private javax.swing.JButton dividir;
    private javax.swing.JButton dos;
    private javax.swing.JButton evaluar;
    private javax.swing.JButton exponente;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton limpiar;
    private javax.swing.JButton nueve;
    private javax.swing.JButton ocho;
    private javax.swing.JTextField pantalla;
    private javax.swing.JButton producto;
    private javax.swing.JButton restar;
    private javax.swing.JButton seis;
    private javax.swing.JButton siete;
    private javax.swing.JButton sumar;
    private javax.swing.JButton tres;
    private javax.swing.JButton uno;
    // End of variables declaration//GEN-END:variables
}
